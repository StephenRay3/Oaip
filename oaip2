#include <iostream>
#include <conio.h>
#include <string>
#include <algorithm>
#include <Windows.h>

using namespace std;

struct Grade {
	int mark;
	Grade* next;
};

typedef Grade* PGrade;

struct Student
{
	string lastName;
	int group;
	PGrade grade;
	Student* next;
}; 


typedef Student* PStudent;

void addStudent(PStudent& startStudent, PStudent& endStudent);
void delStudent(PStudent& startStudent, PStudent& endStudent);
void sortingStudents(PStudent& startStudent);
void seeStudents(PStudent startStudent);

int main()
{
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	PStudent startStudent = NULL, endStudent = NULL;
	while (1) {
		cout << "Операции:" << endl;
		cout << "1. Добавить информацию об студенте" << endl;
		cout << "2. Вывод информации о студенте:" << endl;
		cout << "3. Удаление студента:" << endl;
		cout << "4. Сортировка по фамилиям/группам:" << endl;
		cout << "0. Закончить:" << endl;
		switch (_getch())
		{
		case '1':
			addStudent(startStudent, endStudent);
			break;
		case '2':
			seeStudents(startStudent);
			break;
		case '3':
			delStudent(startStudent, endStudent);
			break;
		case '4':
			sortingStudents(startStudent);
			break;
		case '0':
			return 0;
		}
	}

	return 0;
}

void addStudent(PStudent& startStudent, PStudent& endStudent) {
	system("cls");
	cout << endl << "Добавление студента" << endl;
	PStudent adding = new Student;
	PGrade save = new Grade, adderMark=new Grade;
	adding->next = 0;
	if (!adding) {
		cout << "ERORR" << endl;
		return;
	}
	cout << "	Введите фамилию студента: ";
	cin >> adding->lastName;
	cout << "	Введите группу студента: ";
	cin >> adding->group;
	cout << "	Введите оценки студента(вводить новую оценку через ентер): ";
	int mark;
	do {
		save = adderMark;
		adderMark = new Grade;
		cin >> mark;
		adderMark->mark = mark;
		adderMark->next = save;
		cout << "Закончить?(y/n)";
		switch (_getch()) {
		case'y':case'Y':
			adding->grade = adderMark;
			mark = -212;
			break;
		default:
			break;
		}
	} while (mark!=-212);
	
	if (!startStudent) {
		startStudent = endStudent = adding;
	}
	else {
		endStudent->next = adding;
		endStudent = adding;
	}
	cout << endl;
}

void delStudent(PStudent& startStudent, PStudent& endStudent) {
	system("cls");
	cout << "Удаление неуспевающих студентов" << endl;
	if (startStudent == NULL) {
		cout << "Стек пуст" << endl;
		return;
	}
	PStudent newListStudents = startStudent;
	PStudent list;
	PGrade checkMark = newListStudents->grade;
	startStudent = endStudent = NULL;
	int numBadMarks;
	do {
		numBadMarks = 0;
		checkMark = newListStudents->grade;
		while(checkMark!=NULL) {
			if (checkMark->mark<4 and checkMark->mark > 0) {
				numBadMarks++;
			}
			else if (checkMark->mark < 0) break;
			checkMark = checkMark->next;
		}
		checkMark = NULL;

		if (numBadMarks<3) {
			list = new Student;
			list->lastName = newListStudents->lastName;
			list->group = newListStudents->group;
			list->grade = newListStudents->grade;
			if (!startStudent) {
				list->next = NULL;
				startStudent = endStudent = list;
			}
			else {
				endStudent->next = list;
				endStudent = list;
			}

		}
		newListStudents = newListStudents->next;
	} while (newListStudents!=NULL);
}

void sortingStudents(PStudent& startStudent) {
	system("cls");
	if (startStudent == NULL) {
		cout << "Стек пуст" << endl;
		return ;
	}
	PStudent t = NULL, t1, saver;
	cout << "Выберите сортировку(1-по фамилии; 2-по группе)" << endl;
	string lastName;
	int group;
	PGrade grade;
	Student* next;
	
	switch (_getch())
	{
		case '1':
			do {
				for (t1 = startStudent; t1->next != t; t1 = t1->next)
					if (t1->lastName > t1->next->lastName) {
						lastName = t1->lastName;
						group = t1->group;
						grade = t1->grade;

						t1->lastName = t1->next->lastName;
						t1->group = t1->next->group;
						t1->grade = t1->next->grade;

						t1->next->lastName = lastName;
						t1->next->group = group;
						t1->next->grade = grade;
					}
				t = t1;
			} while (startStudent->next != t);
			break;

		case '2':
			do {
				for (t1 = startStudent; t1->next != t; t1 = t1->next)
					if (t1->group > t1->next->group) {
						lastName = t1->lastName;
						group = t1->group;
						grade = t1->grade;

						t1->lastName = t1->next->lastName;
						t1->group = t1->next->group;
						t1->grade = t1->next->grade;

						t1->next->lastName = lastName;
						t1->next->group = group;
						t1->next->grade = grade;
					}
				t = t1;
			} while (startStudent->next != t);
			break;

		default:
			break;
	}
	cout << "Сортировка завершена" << endl;
}

void seeStudents(PStudent startStudent) {
	system("cls");
	cout << "Вывод содержимого очереди" << endl;
	PStudent listStudents = startStudent;
	PGrade grade;
	if (!listStudents) {
		cout << "Очередь пуста" << endl;
		return;
	}
	for (int i = 1; listStudents != NULL;i++) {
		grade = listStudents->grade;
		cout << "Студент №" << i<<endl;
		cout << "	Фамилия: " << listStudents->lastName << endl;
		cout << "	Группа: " << listStudents->group << endl;
		cout << "	Оценки: ";
		while(grade !=NULL) {
			if (grade->mark > 0) {
				cout << grade->mark << ' ';
				grade = grade->next;
			}
			else break;
		}
		cout << endl;
		listStudents = listStudents->next;
	}
}
